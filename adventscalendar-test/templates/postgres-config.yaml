kind: ConfigMap
apiVersion: v1
metadata:
  name: postgres-config
  namespace: kutuapp-test

data:
  init.sql: |-
    -- Create Users table
    CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
    );
    
    -- Create AdventCalendars table
    CREATE TABLE IF NOT EXISTS adventCalendars (
    id SERIAL PRIMARY KEY,
    locked BOOLEAN DEFAULT FALSE,
    owner INT NOT NULL,
    name VARCHAR(255) UNIQUE NOT NULL,
    additional_info TEXT,
    FOREIGN KEY (owner) REFERENCES users(id)
    );
    
    -- Create Comments table
    CREATE TABLE IF NOT EXISTS comments (
    id SERIAL PRIMARY KEY,
    calendar_id INT NOT NULL,
    window_nr INT NOT NULL,
    author INT REFERENCES users(id),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    content TEXT NOT NULL,
    UNIQUE (calendar_id, window_nr, id),
    FOREIGN KEY (calendar_id) REFERENCES adventCalendars(id) ON DELETE CASCADE
    );
    
    -- Create Pictures table
    CREATE TABLE IF NOT EXISTS pictures (
    id SERIAL PRIMARY KEY,
    calendar_id INT NOT NULL,
    window_nr INT NOT NULL,
    author INT REFERENCES users(id),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    content BYTEA NOT NULL,
    UNIQUE (calendar_id, window_nr, id),
    FOREIGN KEY (calendar_id) REFERENCES adventCalendars(id) ON DELETE CASCADE
    );
    
    
    -- Create AdventWindow table
    CREATE TABLE IF NOT EXISTS adventWindow (
    id SERIAL PRIMARY KEY,
    owner INT REFERENCES users(id),
    address_name VARCHAR(255),
    address POINT NOT NULL,
    apero BOOLEAN,
    time TIME,
    location_hint VARCHAR(255),
    window_nr INT NOT NULL,
    calendar_id INT NOT NULL,
    FOREIGN KEY (owner) REFERENCES users(id),
    FOREIGN KEY (calendar_id) REFERENCES adventCalendars(id) ON DELETE CASCADE,
    CONSTRAINT unique_window_calendar_key UNIQUE (window_nr, calendar_id)
    );
    
    -- Trigger to prevent updates if a calendar is locked
    CREATE OR REPLACE FUNCTION prevent_updates_if_locked() RETURNS TRIGGER AS $$
    BEGIN
    IF (SELECT locked FROM adventCalendars WHERE id = NEW.calendar_id) THEN
    RAISE EXCEPTION 'Calendar is locked and cannot be updated';
    END IF;
    RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    
    -- Triggers for relevant tables
    CREATE TRIGGER check_calendar_lock
    BEFORE INSERT OR UPDATE ON adventWindow
    FOR EACH ROW EXECUTE FUNCTION prevent_updates_if_locked();
    
    CREATE TRIGGER check_calendar_lock_comments
    BEFORE INSERT OR UPDATE ON comments
    FOR EACH ROW EXECUTE FUNCTION prevent_updates_if_locked();
    
    CREATE TRIGGER check_calendar_lock_pictures
    BEFORE INSERT OR UPDATE ON pictures
    FOR EACH ROW EXECUTE FUNCTION prevent_updates_if_locked();
