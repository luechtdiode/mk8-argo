monitoring:
  namespaceOverride: "prometheus"
  defaultRules:
    create: true
    rules:
      alertmanager: true
      etcd: true
      configReloaders: true
      general: true
      k8s: true
      kubeApiserver: true
      kubeApiserverAvailability: true
      kubeApiserverSlos: true
      kubelet: true
      kubeProxy: false
      kubePrometheusGeneral: true
      kubePrometheusNodeRecording: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeScheduler: false
      kubeStateMetrics: true
      network: true
      node: true
      nodeExporterAlerting: true
      nodeExporterRecording: true
      prometheus: true
      prometheusOperator: true
      
  ## Disabled PrometheusRule alerts
  disabled:
    KubeAPIDown: true
    NodeRAIDDegraded: true

  global:
    rbac:
      pspEnabled: false
      create: true
  
  kubeControllerManager:
    enabled: false

  ## Configuration for alertmanager
  ## ref: https://prometheus.io/docs/alerting/alertmanager/
  ##
  alertmanager:
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        traefik.ingress.kubernetes.io/router.middlewares: traefik-secure@kubernetescrd
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
      hosts: 
        - alertmanager.interpolar.ch

    alertmanagerSpec:
      externalUrl: https://alertmanager.interpolar.ch:8443/
      ## Example which selects all namespaces with label "alertmanagerconfig" set to "enabled"
      alertmanagerConfigNamespaceSelector:
        matchLabels:
          monitoring: enabled

  ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
  ## grafana.serviceMonitor.enabled
  grafana:
    enabled: true
    namespaceOverride: ""

    ## Timezone for the default dashboards
    ## Other options are: browser or a specific timezone, i.e. Europe/Luxembourg
    ##
    defaultDashboardsTimezone: Europe/Zurich

    rbac:
      ## If true, Grafana PSPs will be created
      ##
      pspEnabled: false
    admin:
      existingSecret: "prometheus-grafana-secret"
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        traefik.ingress.kubernetes.io/router.middlewares: traefik-secure@kubernetescrd
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
      hosts: 
        - grafana.interpolar.ch
  prometheus:
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        traefik.ingress.kubernetes.io/router.middlewares: traefik-secure@kubernetescrd
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
      hosts: 
        - prometheus.interpolar.ch
    prometheusSpec:
      ## How long to retain metrics
      externalUrl: https://prometheus.interpolar.ch:8443/
      retention: 365d
      retentionSize: 100GB
      # resources:
      #   limits:
      #     cpu: 250m
      #     memory: 1000Mi
      #   requests:
      #     cpu: 250m
      #     memory: 1000Mi
      # storageSpec:
      #   volumeClaimTemplate:
      #     spec:
      #       storageClassName: 
      #       accessModes: ["ReadWriteOnce"]
      #       resources:
      #         requests:
      #           storage: 50Gi
      
      ## If true, a nil or {} value for prometheus.prometheusSpec.serviceMonitorSelector will cause the
      ## prometheus resource to be created with selectors based on values in the helm deployment,
      ## which will also match the servicemonitors created
      ##
      serviceMonitorSelectorNilUsesHelmValues: false

      ## ServiceMonitors to be selected for target discovery.
      ## If {}, select all ServiceMonitors
      ##
      serviceMonitorSelector: {}
      ## Example which selects ServiceMonitors with label "prometheus" set to "somelabel"
      # serviceMonitorSelector:
      #   matchLabels:
      #     prometheus: somelabel

      ## Namespaces to be selected for ServiceMonitor discovery.
      ##
      # serviceMonitorNamespaceSelector: {}
      ## Example which selects ServiceMonitors in namespaces with label "prometheus" set to "somelabel"
      # serviceMonitorNamespaceSelector:
      #   matchLabels:
      #     prometheus: somelabel
      serviceMonitorNamespaceSelector:
        matchLabels:
          monitoring: enabled

      podMonitorSelectorNilUsesHelmValues: false
      podMonitorSelector: {}
      podMonitorNamespaceSelector:
        matchLabels:
          monitoring: enabled

      probeSelectorNilUsesHelmValues: false 
blackbox-exporter:
  ## An Ingress resource can provide name-based virtual hosting and TLS
  ## termination among other things for CouchDB deployments which are accessed
  ## from outside the Kubernetes cluster.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false
    className: "traefik"
    annotations:
      traefik.ingress.kubernetes.io/router.middlewares: traefik-secure@kubernetescrd
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
    hosts: 
      - host: blackbox.interpolar.ch
        paths:
          - path: /
            pathType: ImplementationSpecific
  extraArgs:
    - --history.limit=100
  serviceMonitor:
    ## If true, a ServiceMonitor CRD is created for a prometheus operator
    ## https://github.com/coreos/prometheus-operator
    ##
    enabled: true
