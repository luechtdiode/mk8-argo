templates:
    dashboard_hostname: "traefik.interpolar.ch"
    dashboard_auth: true
    authsecretname:  traefik-dashboard-user-secret
    http_redirect:
      enable: true
    dns_resolver: "cf-production"

traefik:
    #image:
    #  tag: v2.7.1
    # Removing to allow IP setting
    #ports:
    #    udp53:
    #        exposedPort: 53
    #        port: 5300
    #        expose: true
    #        protocol: UDP
    globalArguments:
      - "--global.checknewversion"
      - "--serversTransport.insecureSkipVerify=true"

    additionalArguments:
      - --providers.file.filename=/config/traefik-config.yaml

    #deployment:
    #  annotations:
    #    "sidecar.jaegertracing.io/inject": "true"    

    certResolvers:
      cf-staging:
        caserver: https://acme-staging-v02.api.letsencrypt.org/directory
        dnsChallenge:
          provider: cloudflare
          resolvers: 1.1.1.1
        storage: /certs/acme-stageing1.json       
      cf-production:
        caserver: https://acme-v02.api.letsencrypt.org/directory
        dnsChallenge:
          provider: cloudflare
          resolvers: 1.1.1.1
        storage: /certs/acme1.json
        
    env:
      - name: CF_DNS_API_TOKEN
        valueFrom:
          secretKeyRef:
            key: dns_cloudflare_api_token
            name: acme-provider-api-token-secret
    persistence:
      enabled: true
      #storageClass: openebs-hostpath
      path: /certs
      size: 128Mi
    volumes:
      - mountPath: /config
        name: '{{ printf "%s-configs" .Release.Name }}'
        type: configMap
    ports:
      web:
        port: 8000
        # hostPort: 8000
        expose: true
        exposedPort: 80
        # The port protocol (TCP/UDP)
        protocol: TCP
        # Use nodeport if set. This is useful if you have configured Traefik in a
        # LoadBalancer
        # nodePort: 32080
        # Port Redirections
        # Added in 2.2, you can make permanent redirects via entrypoints.
        # https://docs.traefik.io/routing/entrypoints/#redirection
        # redirectTo: websecure
      websecure:
        # port: 8443
        # hostPort: 8443
        # expose: true
        # exposedPort: 443
        # The port protocol (TCP/UDP)
        # protocol: TCP
        # nodePort: 32443
        # Set TLS at the entrypoint
        # https://doc.traefik.io/traefik/routing/entrypoints/#tls
        tls:
          enabled: true
          # this is the name of a TLSOption definition
          options: "default"
          certResolver: "cf-production"
    tlsOptions:
      default:
        minVersion: VersionTLS12
        maxVersion: VersionTLS13
        cipherSuites:
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          #- TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384
          #- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 
          #- TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256
          #- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          #- TLS_RSA_WITH_AES_256_GCM_SHA384
          #- TLS_RSA_WITH_AES_128_GCM_SHA256
          #- TLS_SHA384_SHA384
          #- TLS_AES_256_GCM_SHA384
          #- TLS_AES_128_GCM_SHA256
        sniStrict: true
        preferServerCipherSuites: true
        curvePreferences:
          - CurveP521
          - CurveP384
    service:
      spec:
        externalTrafficPolicy: Local
    ingressClass:
      enabled: true
      isDefaultClass: true
    ingressRoute:
      dashboard:
        enabled: true
    providers:
      kubernetesCRD:
        enabled: true
        allowCrossNamespace: true
        allowExternalNameServices: true
        allowEmptyServices: false        
      kubernetesIngress:
        # IP used for Kubernetes Ingress endpoints
        publishedService:
          enabled: true
          # Published Kubernetes Service to copy status from. Format: namespace/servicename
          # By default this Traefik service
          # pathOverride: ""
          
    # Logs
    # https://docs.traefik.io/observability/logs/
    logs:
      # Traefik logs concern everything that happens to Traefik itself (startup, configuration, events, shutdown, and so on).
      general:
        # By default, the logs use a text format (common), but you can
        # also ask for the json format in the format option
        # format: json
        # By default, the level is set to ERROR. Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
        level: ERROR
      access:
        # To enable access logs
        enabled: true
        # By default, logs are written using the Common Log Format (CLF).
        # To write logs in JSON, use json in the format option.
        # If the given format is unsupported, the default (CLF) is used instead.
        # format: json
        # To write the logs in an asynchronous fashion, specify a bufferingSize option.
        # This option represents the number of log lines Traefik will keep in memory before writing
        # them to the selected output. In some cases, this option can greatly help performances.
        # bufferingSize: 100
        # Filtering https://docs.traefik.io/observability/access-logs/#filtering
        filters: {}
          # statuscodes: "200,300-302"
          # retryattempts: true
          # minduration: 10ms
        # Fields
        # https://docs.traefik.io/observability/access-logs/#limiting-the-fieldsincluding-headers
        fields:
          general:
            defaultmode: keep
            names: {}
              # Examples:
              # ClientUsername: drop
          headers:
            defaultmode: drop
            names: {
              User-Agent: keep
            }
              # Examples:
              # User-Agent: redact
              # Authorization: drop
              # Content-Type: keep
